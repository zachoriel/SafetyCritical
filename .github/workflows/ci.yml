name: CI

on:
  push:
  pull_request:

permissions:
  contents: write

jobs:
  style:
    name: Style (check & auto-fix)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --- .NET formatting ---
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install dotnet-format
        run: dotnet tool install -g dotnet-format

      # Run style check but don't fail job yet; capture exit code
      - id: dotnet_check
        name: dotnet format (verify)
        shell: bash
        run: |
          set +e
          dotnet format --verify-no-changes
          echo "exit_code=$?" >> $GITHUB_OUTPUT
          exit 0

      # If C# formatting needed, apply fixes
      - name: dotnet format (fix)
        if: steps.dotnet_check.outputs.exit_code != '0'
        run: dotnet format

      # --- Python formatting ---
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Black
        run: pip install black

      # Run style check but don't fail job yet; capture exit code
      - id: black_check
        name: Black (verify)
        shell: bash
        run: |
          set +e
          black --check .
          echo "exit_code=$?" >> $GITHUB_OUTPUT
          exit 0

      # If Python formatting needed, apply fixes
      - name: Black (fix)
        if: steps.black_check.outputs.exit_code != '0'
        run: black .

      # If any fixes were applied, auto-commit them (only when we have write perms)
      - name: Auto-commit formatting changes
        if: |
          (steps.dotnet_check.outputs.exit_code != '0' || steps.black_check.outputs.exit_code != '0') &&
          (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository))
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(format): apply .editorconfig, dotnet-format & black"
          branch: ${{ github.head_ref || github.ref_name }}

      # If fixes were needed but we couldn't auto-commit (e.g., PR from a fork), fail with guidance
      - name: Fail if formatting required and auto-commit not possible
        if: |
          (steps.dotnet_check.outputs.exit_code != '0' || steps.black_check.outputs.exit_code != '0') &&
          !(github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository))
        run: |
          echo "::error::Formatting changes are required. Please run 'dotnet format' and 'black .' locally and push the updates."
          exit 1

  build-test:
    name: Build, Test, Reports
    runs-on: ubuntu-latest
    needs: style

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore & Build (C#)
        run: |
          dotnet restore
          # Build all projects in Release (adjust path if you add a .sln)
          dotnet build --configuration Release --no-restore

      - name: Run C# tests (TRX)
        run: |
          dotnet test ./tests/csharp/PumpController.Tests/PumpController.Tests.csproj \
            --configuration Release \
            --no-build \
            --logger "trx;LogFileName=dotnet_tests.trx" \
            --results-directory ./TestResults

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python test deps
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/python/requirements.txt || true
          pip install pytest

      - name: Run Python tests (JUnit XML)
        run: |
          pytest -q ./tests/python --junitxml=pytest_results.xml

      - name: Generate traceability matrix & validation report
        run: |
          python ./tools/generate_traceability.py

      - name: Upload artifacts (reports & logs)
        uses: actions/upload-artifact@v4
        with:
          name: reports-and-logs
          path: |
            TestResults/dotnet_tests.trx
            pytest_results.xml
            traceability_matrix.md
            validation_report.*
          if-no-files-found: warn
